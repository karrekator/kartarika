/* Copyright © 2020 Evgeny Zaytsev <zx_90@mail.ru>
 * 
 * Distributed under the terms of the GNU LGPL v3 license. See accompanying
 * file LICENSE or copy at https://www.gnu.org/licenses/lgpl-3.0.html
*/

#ifndef TOKEN_TYPE_H
#define TOKEN_TYPE_H

typedef enum {
	TOKEN_UNKNOWN,
	
	// Первоначальные
	TOKEN_MODULE,
	TOKEN_COMMENT,
	TOKEN_INDENT,
	TOKEN_SPACE,
	TOKEN_IDENTIFIER,
	TOKEN_SIGN,
	TOKEN_VAL_STRING,
	
	// Значения переменых.
	TOKEN_VAL_NULL,
	TOKEN_VAL_TRUE,
	TOKEN_VAL_FALSE,
	TOKEN_VAL_INTEGER,
	TOKEN_VAL_FLOAT,
	
	// Поля
	TOKEN_FIELD_CONST,
	TOKEN_FIELD_VAR,
	
	// Простые переменные
	TOKEN_VAR_BOOL,
	
	TOKEN_VAR_INTEGER8,
	TOKEN_VAR_INTEGER16,
	TOKEN_VAR_INTEGER32,
	TOKEN_VAR_INTEGER64,
	
	TOKEN_VAR_UNSIGNED8,
	TOKEN_VAR_UNSIGNED16,
	TOKEN_VAR_UNSIGNED32,
	TOKEN_VAR_UNSIGNED64,
	
	TOKEN_VAR_FLOAT32,
	TOKEN_VAR_FLOAT64,
	TOKEN_VAR_FLOAT80,
	
	TOKEN_VAR_STRING,
	
	// Составные переменные.
	TOKEN_ENUMERATION,
	TOKEN_STRUCTURE,
	TOKEN_UNION,
	
	// Знаки
	TOKEN_SIGN_NULLABLE,
	TOKEN_SIGN_OPEN_BRACES,
	TOKEN_SIGN_CLOSE_BRACES,
	TOKEN_SIGN_GET_FIELD,
	TOKEN_SIGN_COMMA,
	TOKEN_SIGN_COLON,

	TOKEN_SIGN_ASSIGN,

	TOKEN_SIGN_PLUS,
	TOKEN_SIGN_MINUS,
	TOKEN_SIGN_MUL,
	TOKEN_SIGN_DIV,
	TOKEN_SIGN_MOD,
	
	TOKEN_SIGN_AND,
	TOKEN_SIGN_OR,
	TOKEN_SIGN_NOT,
	TOKEN_SIGN_EQUAL,
	TOKEN_SIGN_GREATER,
	TOKEN_SIGN_LESS,
	
	TOKEN_SIGN_BIT_AND,
	TOKEN_SIGN_BIT_OR,
	TOKEN_SIGN_BIT_NOT,
	TOKEN_SIGN_BIT_XOR,
	
	// Управление последовательостью выполенения.
	TOKEN_COMMAND_BLOCK,
	TOKEN_COMMAND_PASS,
	
	TOKEN_COMMAND_IF,
	TOKEN_COMMANT_THEN,
	TOKEN_COMMAND_ELSE,
	
	TOKEN_COMMAND_FOR,
	TOKEN_COMMAND_FROM,
	TOKEN_COMMAND_TO,
	TOKEN_COMMAND_STEP,
	
	TOKEN_COMMAND_FOREACH,
	TOKEN_COMMAND_GET,
	
	TOKEN_COMMAND_WHILE,

	TOKEN_COMMAND_CONTINUE,
	TOKEN_COMMAND_BREAK,
	
	TOKEN_COMMAND_OPEN, // рыскрыть вопросительный элемент.
	
	// Функция.
	TOKEN_FUNCTION,
	
	TOKEN_FUNC_MODIFIER,
	//TOKEN_FUNC_PRIVATE,
	//TOKEN_FUNC_PROTECTED,
	//TOKEN_FUNC_PUBLIC,
	//TOKEN_FUNC_LOCAL,
	TOKEN_FUNC_STAT,
	
	//TOKEN_ARGUMENT_CONST,
	//TOKEN_ARGUMENT_VAR,
	//TOKEN_ARGUMENT_POINTER,
	
	TOKEN_FUNC_RETURN_TYPE,
	TOKEN_FUNC_RETURN,
	
	// Класс
	
	// Шаблон класса
	
	// Тест
	TOKEN_TEST,
	TOKEN_CHECK,
} KTokenType;

const char* k_token_type_get_name(const KTokenType type);

#endif // TOKEN_TYPE_H
